var ROW_SIZE = 53
var ITTER = 100

var O = 0
var I = 1

fn pattern(A, B, C) {
    return (A << 2) | (B << 1) | C
}

var patterns = [0, 0, 0, 0, 0, 0, 0, 0]
patterns at pattern(O, O, O) = O
patterns at pattern(O, O, I)  = I
patterns at pattern(O, I, O)  = I
patterns at pattern(O, I, I)  = I
patterns at pattern(I, O, O)  = O
patterns at pattern(I, O, I)  = I
patterns at pattern(I, I, O)  = I
patterns at pattern(I, I, I)  = O

fn next_row(prev) {
    var next = [0] * ROW_SIZE
    var i = 1
    while(i < ROW_SIZE - 1) {
        next at i = patterns[pattern(prev[i - 1], prev[i], prev[(i + 1) % ROW_SIZE])]
        i += 1
    }
    return next
}

var cell_image = [' ', '*']

fn print_row(r) {
    print("|")
    var i = 0
    while(i < ROW_SIZE) {
        print(cell_image[r[i]])
        i += 1
    }
    print("|")
}

fn random_row() {
    var out = [0] * ROW_SIZE
    var i = 0
    while(i < ROW_SIZE) {
        out at i = rand() % 2
        i += 1
    }
    return out
}

var next = random_row()
var i = 0
while(i < ITTER) {
    print_row(next)
    next = next_row(next)
    i += 1
}